package cc.unknown.module.impl.exploit;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.netty.DisconnectionEvent;
import cc.unknown.event.impl.netty.PacketEvent;
import cc.unknown.event.impl.other.ClickGuiEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.ModuleInfo;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.client.Cold;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.network.TimedPacket;
import io.netty.util.concurrent.GenericFutureListener;
import net.minecraft.network.NetworkManager.InboundHandlerTuplePacketListener;
import net.minecraft.network.Packet;

@SuppressWarnings("all")
@ModuleInfo(name = "FakeLag", category = Category.Exploit)
public class FakeLag extends Module {

	private final List<Packet<?>> packets = new CopyOnWriteArrayList<>();
	private Cold cold = new Cold();

	private SliderValue outboundDelay = new SliderValue("Delay", 500, 0, 1000, 10);

	public FakeLag() {
		this.registerSetting(outboundDelay);
	}
	
	@EventLink
	public void onGui(ClickGuiEvent e) {
		this.setSuffix("- [" + outboundDelay.getInputToInt() + "]");	
	}

	@Override
	public void onEnable() {
		super.onEnable();
		if (mc.thePlayer == null || mc.isIntegratedServerRunning()) {
			toggle();
			return;
		}
		clearPackets();
	}

	@Override
	public void onDisable() {
		super.onDisable();

		if (mc.thePlayer == null)
			return;

		for (Packet packet : packets) {
			mc.getNetHandler().getNetworkManager().outboundPacketsQueue.add(new InboundHandlerTuplePacketListener(packet, (GenericFutureListener) null));
		}
		packets.clear();

	}

	@EventLink
	public void onPacket(PacketEvent e) {
		if (mc.thePlayer == null || mc.thePlayer.isDead)
			return;
		
		if (e.isSend()) {
			packets.add(e.getPacket());
			e.setCancelled(true);
			
			while (!packets.isEmpty()) {
				if (cold.hasTimeElapsed(outboundDelay.getInputToInt(), true)) {
					PacketUtil.sendPacketNoEvent(packets.get(0));
					packets.remove(0);
				} else {
					break;
				}
			}
		}
	}
	
	@EventLink
	public void onDisconnect(final DisconnectionEvent e) {
		this.disable();
	}
	
	private void clearPackets() {
		this.packets.clear();
	}

}