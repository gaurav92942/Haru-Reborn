package cc.unknown.module.impl.exploit;

import java.util.ArrayList;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.netty.PacketEvent;
import cc.unknown.event.impl.render.RenderEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.ModuleInfo;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.helpers.MathUtil;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.network.cpackets.CPacketKeepAlive;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;

@ModuleInfo(name = "PingSpoof", category = Category.Exploit)
public class PingSpoof extends Module {
	
	private SliderValue delay = new SliderValue("Delay", 500, 0, 4000, 10);
	private ArrayList<CPacketKeepAlive> cKeepAlive = new ArrayList<>();
	
	public PingSpoof() {
		this.registerSetting(delay);
	}
	
    @Override
    public void onEnable() {
        super.onEnable();
        cKeepAlive.clear();
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        if (!cKeepAlive.isEmpty()) {
        	cKeepAlive.clear();
        }
    }
    
    @EventLink
    public void onPakcet(PacketEvent event) {
    	Packet<?> packet = event.getPacket();
    	
    	if (event.isSend()) {
            if (packet instanceof C00PacketKeepAlive) {
                final C00PacketKeepAlive keepAlive = (C00PacketKeepAlive) packet;
                cKeepAlive.add(new CPacketKeepAlive(keepAlive.getKey(), (long)(System.currentTimeMillis() + delay.getInputToLong() + MathUtil.nextLong(0L, 200L))));
                event.setCancelled(true);
            }
    	}
    }
    
    @EventLink
    public void onRender3D(RenderEvent event) {
    	if (event.is3D()) {
        	if (mc.thePlayer != null && !cKeepAlive.isEmpty()) {
        		final ArrayList<CPacketKeepAlive> remove = new ArrayList<CPacketKeepAlive>();
        		for (final CPacketKeepAlive packet : cKeepAlive) {
        			if (packet.getTime() < System.currentTimeMillis()) {
        				PacketUtil.sendPacketNoEvent(new CPacketKeepAlive(packet.getKey(), 0));
        				remove.add(packet);
        			}
                }
        		cKeepAlive.removeIf(remove::contains);
            }
    	}
    }
}
